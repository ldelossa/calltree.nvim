*calltree.txt* Calltree
*calltree.nvim*

Author:   Louis DeLosSantos <louis.delos@gmail.com>
Homepage: <https://github.com/ldelossa/calltree.nvim>
License:  MIT license

 ______   ________   __       __     _________  ______    ______   ______      
/_____/\ /_______/\ /_/\     /_/\   /________/\/_____/\  /_____/\ /_____/\     
\:::__\/ \::: _  \ \\:\ \    \:\ \  \__.::.__\/\:::_ \ \ \::::_\/_\::::_\/_    
 \:\ \  __\::(_)  \ \\:\ \    \:\ \    \::\ \   \:(_) ) )_\:\/___/\\:\/___/\   
  \:\ \/_/\\:: __  \ \\:\ \____\:\ \____\::\ \   \: __ `\ \\::___\/_\::___\/_  
   \:\_\ \ \\:.\ \  \ \\:\/___/\\:\/___/\\::\ \   \ \ `\ \ \\:\____/\\:\____/\ 
    \_____\/ \__\/\__\/ \_____\/ \_____\/ \__\/    \_\/ \_\/ \_____\/ \_____\/ 
                                                                               
====================================================================================
CONTENTS                                                         *calltree-contents*

  1     Intro.........................................|calltree-intro|
  2     Usage.........................................|caltree-usage|
  2.1    Unified Panel................................|calltree-unified-panel|  
  3     Commands......................................|calltree-commands|
  4     Mappings......................................|calltree-mappings|
  5     Config........................................|calltree-config|
  6     Highlights....................................|calltree-highlights|
  6.1    Icon Highlights..............................|calltree-icon-highlights|
  6.2    UI Highlights................................|calltree-ui-highlights|
  7     LSP Wrappers..................................|calltree-lsp-wrappers|

====================================================================================
INTRODUCTION                                                        *calltree-intro*

Calltree is a simple plugin which adds the missing "call-hierarchy" tool
found in IDEs such as Pycharm and VSCode. 

A "call-hierarchy" tool creates a tree view of incoming (callers) or outgoing
(callees) for a given symbol.

From there you can drive down further, discovering "callers-of-callers" or
"callees-of-callees", and producing a tree view.

Calltree also provides a document symbol tree.

====================================================================================
Usage                                                               *calltree-usage*

Calltree's entry point is the "calltree.lsp.handlers.ch_lsp_handler" function. 

This function returns a handler suitable for usage in neovim's LSP handler
table.

While the setup function will hijack the handlers table for you, you can also do this 
manually like so:

    vim.lsp.handlers['callHierarchy/incomingCalls'] = vim.lsp.with(
                require('calltree.lsp.handlers').ch_lsp_handler("from"), {}
    )
    vim.lsp.handlers['callHierarchy/outgoingCalls'] = vim.lsp.with(
                require('calltree.lsp.handlers').ch_lsp_handler("to"), {}
    )
    vim.lsp.handlers['textDocument/documentSymbol'] = vim.lsp.with(
                require('calltree.lsp.handlers').ws_lsp_handler(), {}
    )

This is what the "calltree.setup()" function does.

Once the calltree handlers are in place issuing the normal "vim.lsp.buf.incoming_calls" 
and "vim.lsp.buf.outgoing_calls" will open the calltree window.

The calltree UI can be used as a unified panel or as individual elements. 

                                                            *calltree-unified-panel*

Calltree.nvim works as a unified panel on the left (or top/right/bottom when configured) of the editor windows. 

The unified panel will consist of any recently created symboltree or calltree. 
The panel can be toggled closed and open (once a LSP request has been made) with "CTPanel".

When inside the panel you can use the keybinding "h" to temporarily hide the Calltree.nvim UI element the cursor is inside. When you close and open the panel the hidden element will return. 

If you'd like to permanently close a Calltree.nvim UI element (until another LSP request) from the panel use the "CTClose" or "STClose" commands. This closes and **removes** the tree from Calltree.nvim's memory. 

From there check out *calltree-commands* to manipulate the calltree UI.

====================================================================================
COMMANDS                                                         *calltree-commands*

Calltree exports several commands for manipulating the calltree UI. 
                                                                           *:CTOpen*
:CTOpen                                         
    Open the calltree window with the most recent call tree present. 
    As a convenience, calling this again will jump back to the window
    which opened the calltree.
                                                                          *:CTClose*       
:CTClose       
    Closes the calltree window until another call hierarchy request is made.
                                                                         *:CTPanel*
:CTPanel
    Toggles the unified panel open and closed.
    An LSP request must be made for the panel to toggle open.
    When the panel is toggled closed the trees remain in memory and will
    appear again when toggled open.

    To remove a calltree or symboltree, such that toggling
    does not show the tree again, use the CTClose or
    STClose commands.
                                                                           *:STOpen*
:STOpen                                         
    Open the symboltree window with the most recent outline tree present. 
    As a convenience, calling this again will jump back to the window
    which opened the symboltree.
                                                                          *:STClose*       
:STClose       
    Closes the symboltree window until another document symbols lsp
    request is made.
                                                                         *:CTExpand*
:CTExpand      
    Expands a calltree symbol resolving any callers/callees of the symbol under 
    the cursor.
                                                                       *:CTCollapse*    
:CTCollapse    
    Collapses a calltree symbol and its subtree.
                                                                          *:CTFocus*    
:CTFocus    
    Create a new calltree with the symbol under the cursor as root.
                                                                           *:CTJump*    
:CTJump        
    Jump to the symbol's definition. 
    How this jump is done is controlled via config.
                                                                        *:CTJumpTab*    
:CTJumpTab
    Jump to the symbol's definition in a new tab.
                                                                      *:CTJumpSplit*    
:CTJumpSplit  
    Jump to the symbol's definition in a new split.
                                                                     *:CTJumpVSplit*    
:CTJumpVSplit        
    Jump to the symbol's definition. 
                                                                         *:CTSwitch*    
:CTSwitch        
    Focus the symbol under the cursor and switch the calltree's
    direction.

    For example, if your currently viewing incoming calls for symbol
    Func1 and perform a CTSwtch, Func1 will become root and the calltree
    will show outgoing calls for this symbol.

    The typical use case is calling CTSwitch on the root symbol, turning
    the current outgoing calltree to an incoming call tree (or vice versa).
                                                                          *:CTHover* 
:CTHover       
    Show hover info for the symbol
                                                                         *CTDetails* 
:CTDetails      
    Show symbol detail information in a popup.
                                                                        *:CTClearHL* 
:CTClearHL       
    Clears any highlights after jumping to location.

    Highlights are also clearned when the current Calltree window
    is closed.
                                                                       *:CTDumpTree* 
:CTDumpTree       
    Only valid when inside a calltree window.
    Dumps the tree data structure to a buffer for debugging.
                                                                       *:CTDumpNode* 
:CTDumpNode       
    Same as CTDumpTree but dumps the current node and it's children to
    a buffer for debugging.

Additionally, mirror commands exist to manipulate Calltree.nvim's windows when not 
inside them. These are quickly outlined below and reflect the above commands. 

-- calltree specific commands
:CTNextCalltree
:CTPrevCalltree        
:CTExpandCalltree      
:CTCollapseCalltree    
:CTCollapseAllCalltree    
:CTFocusCalltree       
:CTSwitchCalltree      
:CTJumpCalltree        
:CTJumpCalltreeSplit   
:CTJumpCalltreeVSplit  
:CTJumpCalltreeTab     
:CTHoverCalltree       
:CTDetailsCalltree     
-- symboltee specific commands
:CTNextSymboltree          
:CTPrevSymboltree          
:CTExpandSymboltree        
:CTCollapseSymboltree      
:CTCollapseAllSymboltree      
:CTJumpSymboltree          
:CTJumpSymboltreeSplit     
:CTJumpSymboltreeVSplit    
:CTJumpSymboltreeTab       
:CTHoverSymboltree         
:CTDetailSymboltree        

====================================================================================
MAPPINGS                                                         *calltree-mappings*

Since all of calltree's usage happens within it's own buffer, 
its pretty safe to assign this buffer a default keymap. 

This does not stop you from mapping *calltree-commands* to your own liking.

The default buffer mapping is set via lua and should feel familiar if you use vim folds.

    vim.api.nvim_buf_set_keymap(buffer_handle, "n", "zo", ":CTExpand<CR>", opts)
    vim.api.nvim_buf_set_keymap(buffer_handle, "n", "zc", ":CTCollapse<CR>", opts)
    vim.api.nvim_buf_set_keymap(buffer_handle, "n", "<CR>", ":CTJump<CR>", opts)
    vim.api.nvim_buf_set_keymap(buffer_handle, "n", "f", ":CTFocus<CR>", opts)
    vim.api.nvim_buf_set_keymap(buffer_handle, "n", "i", ":CTHover<CR>", opts)
    vim.api.nvim_buf_set_keymap(buffer_handle, "n", "d", ":CTDetails<CR>", opts)
    vim.api.nvim_buf_set_keymap(buffer_handle, "n", "s", ":CTSwitch<CR>", opts)
    vim.api.nvim_buf_set_keymap(buffer_handle, "n", "?", ":lua require('calltree.ui').help(true)<CR>", opts)

====================================================================================
CONFIG                                                             *calltree-config*

To configure calltree you can pass a config table to "require('calltree').setup(config)".
You only need to specify the fields you wish to override.

The config table is described below:

    M.config = {
        -- where the calltree ui will spawn
        -- "left" (default) - Spawn calltree as the left most vertical window.
        -- "right"          - Spawn calltree as the left most vertical window.
        -- "top"            - Spawn calltree as the bottom most horizontal window
        --                    more details about the symbol will be shown with this
        --                    layout.
        -- "bottom"         - Spawn calltree as the top most horizontal window
        --                    more details about the symbol will be shown with this
        --                    layout.
        layout = "left",
        -- the initial size of the calltree ui
        -- int              - An integer used in the initial "resize" command for
        --                    the ui. 
        layout_size = 30,
        -- the method used when jumping to a symbol in the calltree 
        -- "invoking"       - Jumping to a symbol will use the window which the calltree
        --                    was initially invoked from.
        --                    If the invoking window has been removed a new botright split
        --                    will be created and take on the invoking window identity from there.
        -- "neighbor"       - Jumping to a symbol will use the neighbor on the opposite side of
        --                    the call tree. 
        --                    If no neighbor exists a split will be created for the jump. 
        jump_mode = "invoking",
        -- the icon to represent the symbol type
        -- "none"           - No icons for symbol types will just use text
        -- "nerd"           - Use Nerd font icon set for symbol types (requires patched font)
        -- "codicon"        - Use VSCode codicon icon set for symbol types (requires patched font)
        icons = "none",
        -- disables highlights in the calltree UI completely.
        no_hls = false,
        -- user provided icon highlight overrides. 
        -- see *calltree-icon-highlights*
        icon_highlights = {},
        -- bool which enables or diables indentation guides in the UI.
        -- defaults to true.
        indent_guides = true,
        -- user provided UI highlights.
        -- see *calltree-ui-highlights*
        hls = {},
        -- some LSP's will provide symbols with different names depending on
        -- the method called. 
        --
        -- if resolve_symbols is set to true a workspace symbol request will
        -- be made for any responses from LSP's, providing clearer information 
        -- for symbols in the calltree.
        --
        -- this will cause the UI to open slower, tho the symbol requests are 
        -- async so it will not block the editor.
        -- for full context see: 
        -- https://github.com/golang/go/issues/49690#issuecomment-975902067
        --
        -- set this to false for large codebases to speed up opening
        -- the calltree.
        resolve_symbols = true,
        -- automatic highlighting and source code window position updates when 
        -- navigating the symboltree or calltree UI. Set to false to disable.
        auto_highlight = true,
        -- if set to true when navigating the symboltree outline 
        -- the related symbol in the source code window will be placed
        -- in the middle of the window.
        --
        -- the scrolloff is turned off once the cursor leaves the symboltree
        -- outline.
        scrolloff = false,
        -- map <Left>, <Right>, <Up>, <Down> to resize calltree/symboltree
        map_resize_keys = true,
        -- if set to true the cursor will be hidden when inside a Calltree.nvim
        -- window. 
        --
        -- this is done by setting guicursor to the same fg/bg as CursorLine hi
        -- making it blend in with the CursorLine.
        --
        -- set your CursorLine hi correctly with cterm/gui values for this to work.
        hide_cursor = false,
        -- if true Calltree.nvim will create popups at the bottom right of the screen
        -- to notify the user of information and errors.
        --
        -- notifications use the "Error", "WarningMsg", and "NormalFloat" highlights
        enable_notify = true,
    }

For an example configuration with suggested keymaps refer to my dotfiles:
https://github.com/ldelossa/dotfiles/blob/master/nvim/lua/configs/calltree.lua

====================================================================================
HIGHLIGHTS                                                     *calltree-highlights*

A default set of highlights will be applied as long as "no_hls=false" is provided 
in the config (this is the default setting). 

Flipping this settings to true will disable all highlights (accept for jumps).

The default set of highlights may not work for your color scheme, therefore its
possible to theme calltree further. 

The default higlights will stay in sync with "https://github.com/ldelossa/vimdark"

See *calltree-icon-highlights* and *calltree-ui-highlights* for more info.

                                                          *calltree-icon-highlights*
Each icon in the calltree UI can have its own highlight applied to it. 

By default the following highlight groups will be used for each icon type:

    M.icon_hls = {
        Folder = "CTNamespace",
        Reference = "CTParameterReference",
        Color = "CTType",
        Snippet = "CTType",
        Keyword = "CTType",
        Value = "CTType",
        Unit = "CTType",
        Text = "CTString",
        File = "CTURI",
        Module = "CTNamespace",
        Namespace = "CTNamespace",
        Package = "CTNamespace",
        Class = "CTType",
        Method = "CTMethod",
        Property = "CTMethod",
        Field = "CTField",
        Constructor = "CTConstructor",
        Enum = "CTType",
        Interface = "CTType",
        Function = "CTFunction",
        Variable = "CTConstant",
        Constant = "CTConstant",
        String = "CTString",
        Number = "CTNumber",
        Boolean = "CTBoolean",
        Array = "CTConstant",
        Object = "CTType",
        Key = "CTType",
        Struct = "CTType",
        Null = "CTType",
        EnumMember = "CTField",
        Struct = "CTType",
        Event = "CTType",
        Operator = "CTOperator",
        TypeParameter = "CTParameter",
    }

If you maintain your own colorscheme then feel free to add or link these highlight groups
accordingly. 

If you don't want to define these highlight groups yourself and have a set of highlight groups
you'd like to use instead you can provide them via calltree's setup function. 

Any provided highlight groups will be merged with the table above. 

For example:

    calltree.setup({
        icon_hls = {
            File = MyFileIconHL
        }
    })

Will highlight "File" icons in the calltree UI using "MyFileIconHL" and highlight all others with the
default "CT*" highlight group defined above.

Individuals who are using tree-sitter highlights across the board (you're using a tree-sitter color scheme) should provide this table to the setup function:

    M.icon_hls = {
        Folder = "TSNamespace",
        Reference = "TSParameterReference",
        Color = "TSType",
        Snippet = "TSType",
        Keyword = "TSType",
        Value = "TSType",
        Unit = "TSType",
        Text = "TSString",
        File = "TSURI",
        Module = "TSNamespace",
        Namespace = "TSNamespace",
        Package = "TSNamespace",
        Class = "TSType",
        Method = "TSMethod",
        Property = "TSMethod",
        Field = "TSField",
        Constructor = "TSConstructor",
        Enum = "TSType",
        Interface = "TSType",
        Function = "TSFunction",
        Variable = "TSConstant",
        Constant = "TSConstant",
        String = "TSString",
        Number = "TSNumber",
        Boolean = "TSBoolean",
        Array = "TSConstant",
        Object = "TSType",
        Key = "TSType",
        Struct = "TSType",
        Null = "TSType",
        EnumMember = "TSField",
        Struct = "TSType",
        Event = "TSType",
        Operator = "TSOperator",
        TypeParameter = "TSParameter",
    }

                                                            *calltree-ui-highlights*

Other UI highlights are provided by the "calltree.hls" table.
 
M.hls = {
    -- highlight of the virtual text positioned next to the symbol name in the calltree UI.
    SymbolDetailHL        = "CTSymbolDetail",
    -- highlight of the symbol itself in the calltree UI, e.g. "Func1"
    SymbolHL            = "CTSymbol",
    -- the hight of the symbol being jumped to in it's source file.
    SymbolJumpHL        = "CTSymbolJump",
    -- the highlight of any references to the above symbol.
    SymbolJumpRefsHL    = "CTSymbolJumpRefs",
    -- the highlight of indent guides if enabled
    IndentGuideHL       = "CTIndentGuide",
    -- the highlight for expanded guide 
    ExpandedGuideHL     = "CTExpandedGuide",
    -- the highlight for collapsed guide
    CollapsedGuideHL    = "CTCollapsedGuide"
    -- the highlight used for cursorline in the file explorer when
    -- a file is selected.
    CTSelectFiletree    = "CTSelectFiletree"
}

The usage is similar to the icon highlights but are specified by supplying a "hls" 
table within the config supplied to calltree's setup function.

List of all unique highlights:
    -- ui
    hi CTSymbol             
    hi CTSymbolDetail         
    hi CTSymbolJump         
    hi CTSymbolJumpRefs     
    hi CTIndentGuide
    hi CTExpandedGuide
    hi CTCollapsedGuide
    -- icons
    hi CTParameterReference 
    hi CTURI                
    hi CTNamespace          
    hi CTMethod             
    hi CTField              
    hi CTConstructor        
    hi CTType               
    hi CTFunction           
    hi CTConstant           
    hi CTString             
    hi CTNumber             
    hi CTBoolean            
    hi CTConstant           
    hi CTOperator           
    hi CTParameter          

====================================================================================
LSP Wrappers                                                 *calltree-lsp-wrappers*

Calltree.nvim ships a set of LSP wrapper functions in `require('calltree.lsp.wrappers')`.

These wrappers hook into `require('calltree.ui.notify')` providing notifications to
the user when LSP requests are made.

This is nice for large codebases or sluggish LSPs. It informs the users Calltree.nvim
is indeed working on your request.

You can map these functions in place of any mappings you have to the call hierarchy and
document symbols endpoints.

Function Mapping:

vim.lsp.buf.document_symbols => require('calltree.lsp.wrappers').buf_document_symbols
vim.lsp.buf.incoming_calls   => require('calltree.lsp.wrappers').buf_incoming_calls
vim.lsp.buf.outgoing_calls   => require('calltree.lsp.wrappers').buf_outgoing_calls


Example keymaps:

vim.api.nvim_set_keymap("n", "<C-l>o", "<cmd>lua require('calltree.lsp.wrappers').buf_outgoing_calls()<CR>", opts)
vim.api.nvim_set_keymap("n", "<C-l>i", "<cmd>lua require('calltree.lsp.wrappers').buf_incoming_calls()<CR>", opts)
vim.api.nvim_set_keymap("n", "<C-l>do", "<cmd>lua require('calltree.lsp.wrappers').buf_document_symbol()<CR>", opts)
vim.api.nvim_set_keymap("i", "<C-l>o", "<cmd>lua require('calltree.lsp.wrappers').buf_outgoing_calls()<CR>", opts)
vim.api.nvim_set_keymap("i", "<C-l>i", "<cmd>lua require('calltree.lsp.wrappers').buf_incoming_calls()<CR>", opts)
vim.api.nvim_set_keymap("i", "<C-l>do", "<cmd>lua require('calltree.lsp.wrappers').buf_document_symbol()<CR>", opts)
